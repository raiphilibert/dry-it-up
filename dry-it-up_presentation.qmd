---
title: "Vancouver Datafest 2022 - Dry It Up"
author: "Raissa Philibert"
format: revealjs
execute:
  echo: true
  eval: false
editor: visual
---

## Before we start

Git repository with code and slides:

https://github.com/raiphilibert/dry-it-up

## Don't Repeat Yourself - DRY

-   Principle of software development

-   Avoid repeating information

-   Let's see an example of why

## Dataset

-   Example from measurements of water chemistry dataset that is freely available

-   Dataset "water_chemistry.Rda" under data in the git repository

-   You can also download this dataset directly from the "[rems](https://github.com/bcgov/rems)" package (provided by BC Gov)

## Code to download EMS data

```{r, echo = T,}
library(rems)
library(dplyr)
four_year <- get_ems_data(which = "4yr")

ems_sites_vec <- c("E255013","E271643")
##EMS Site: 
filtered_4yr <-
  filter_ems_data(four_year, emsid = ems_sites_vec)

save(filtered_4yr, file = "data/water_chemistry.Rda")
```

# Example 1: Boring, tedious,code

Let's look at our dataset.

![](dry-it-up_presentation_files/siteMap.png)

```{r}
load("data/water_chemistry.Rda")
filtered_4yr %>% distinct(MONITORING_LOCATION,EMS_ID)

```

# Example 1: Boring, tedious,code

If we've never heard of DRY and we want to make a plot for each parameter and each site.

Let's start this live coding example by looking at the parameters

```{r}


```

# Example 1: Boring, tedious,code

Let's create a first plot for one parameter, one site

```{r}
library(ggplot2)

dat_ems_255013_ph <-
  filtered_4yr %>%
  filter(
    EMS_ID == "E255013",
    PARAMETER == "pH"
  )

pl <- ggplot(dat_ems_255013_ph,
       aes(x = COLLECTION_START,
                 y = RESULT)) +
  geom_point()+
  geom_line()+
  ylab("pH (pH uits)")+
  xlab("Date")
  theme_bw()
  
print(pl)

```

Ok, now let's do this for each parameter, each site.

# Example 1: The real kicker

Reviewer doesn't like the format of these plots. Let's do them again?

![](dry-it-up_presentation_files/oh_hell_no.gif){fig-align="center"}

# Solution Step 1: Loops

A loop is a sequence of operations that are performed over and over in some order using a loop `variable`.

```{r, eval = F}

for (variable in collection) {
  do things with variable
}
```

# Loops

You can name the loop `variable` anything you like with a few restrictions:

-   the name of the variable cannot start with a number

A few notes about the loop syntax:

1.  The loop condition `(variable in collection)` is enclosed in parentheses `()`.

2.  The body of the loop is enclosed in curly braces `{ }`.

# Basic Loop

```{r, basicLoop}
vowels <- c("a", "e", "i", "o", "u")
# loop through each element in the vector and print out the letter
for (v in vowels) {
  print(v)
}
```

# Loop on our dataset

Live code: let's try make a plot for each site

```{r}

```

# Solution Step 2: Functions

# 

### **How to Write a Function in R - part I**

There are several parts of a function:

1.  **Function name**. - e.g plot(my_data) is a function with the name `plot`. You pass that function my_data and it plots accordingly.

2.  **The function() function**: A function that allows you to create a function.

3.  **Function Arguments:** what's the function going to use?

4.  **Documentation:** Not required for the function but for yourself

    See: https://www.earthdatascience.org/courses/earth-analytics/automate-science-workflows/write-function-r-programming/

# Function example

```{r}
# this is an example function
function_name <- function(argument1, argument2) {
  #' document your function here
  #' what the function does
  #' function inputs and outputs
  some_calculated_output <- (argument1 + argument2 )
  return(some_calculated_output)
}
```

# Challenge

Write a function, called inches_to_mm that converts inches of rain to mm.

```{r}
inches_to_mm <- function(temp_fahr) {
#' describe what the function does here
#' inputs: Describe the input(s) that the function takes and the format of the input (ie numeric, character, data.frame, etc)
#' outputs: Describe the output(s) and associated output format

#' calculate mm

return()

}
```

# Function example

Let's fill make a function for our plots

-   need to define our arguments, including default arguments

```{r}
# this is an example function
function_name <- function(argument1, argument2,default_argument = '') {
  #' document your function here
  #' what the function does
  #' function inputs and outputs
  some_calculated_output <- (argument1 + argument2 )/divide_by
  return(some_calculated_output)
}
```

# Documenting functions

1.  Remind your future self what the function does

2.  Show your future self and your colleagues how to use the function

3.  Help anyone else looking at your code understand what **you think** the function does

# ROxygen

Helpful if you want to make packages later

```{r}
#' @name count_na
#' @title provide a count of NAs in the columns of a data.frame
#' @param dt a data frame
#' @param columns a character vector of column names (default: all columns)
#' 
#' @section Improvements to do:
#'  - add compatibility with vectors
#'  - add ability to count NAs in all columns and sort output
#' 
#' @author  Raissa 
#' @import dplyr
#' @importFrom tidyr pivot_longer
#' @export
```

# Solution Step 3: If Statements

-   If statements are about making choices.

-   Use `if (condition)` to start a conditional statement, `else if (condition)` to provide additional tests, and `else` to provide a default.

-   Use `==` to test for equality.

-   `X && Y` is only true if both X and Y are true.

-   `X || Y` is true if either X or Y, or both, are true.

    # Example

    An example for our running example: do we save the plot or not?

```{r}


```

Any other choices you can think of?

# Solution Step 4: Apply/Map functions

-   To avoid loops, people often use apply functions

    -   `apply()`, `lapply()`, `tapply()` etc

-   purrr functions provide more consistency in output datatype

    -   Need to choose function based on output type

See: https://www.r-bloggers.com/2020/05/one-stop-tutorial-on-purrr-package-in-r/

# Example: map()

Instead of a loop, let's use the map function to create multiple plots

```{r}

```

# Example: map2()

Example to create a dataframe

```{r}

x <- c(2, 4, 5, 6)
y <- c(2, 3, 4, 5)
to_Power <- function(x, y){
  return(x**y)
}
map2(x, y, to_Power)

```

# Example: map_df or map_chr

```{r}


```

# 

![](dry-it-up_presentation_files/download.jpg){fig-align="center" width="60%"}
